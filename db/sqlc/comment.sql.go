// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: comment.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comment ("commentBy", "commentOn", "comment","commentAt") VALUES ($1, $2, $3,$4) RETURNING "commentID", "commentBy", "commentOn", comment, "commentAt"
`

type CreateCommentParams struct {
	CommentBy int32     `json:"commentBy"`
	CommentOn int32     `json:"commentOn"`
	Comment   string    `json:"comment"`
	CommentAt time.Time `json:"commentAt"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.queryRow(ctx, q.createCommentStmt, createComment,
		arg.CommentBy,
		arg.CommentOn,
		arg.Comment,
		arg.CommentAt,
	)
	var i Comment
	err := row.Scan(
		&i.CommentID,
		&i.CommentBy,
		&i.CommentOn,
		&i.Comment,
		&i.CommentAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comment WHERE "commentID" = $1
`

func (q *Queries) DeleteComment(ctx context.Context, commentid int32) error {
	_, err := q.exec(ctx, q.deleteCommentStmt, deleteComment, commentid)
	return err
}

const getComment = `-- name: GetComment :one
SELECT "commentID", "commentBy", "commentOn", comment, "commentAt", user_id, "firstName", "lastName", username, email, password, "profileImage", "profileCover", following, followers, bio, country, website FROM "comment" LEFT JOIN "users" ON users.user_id=comment."commentBy" WHERE comment."commentID"=$1 AND comment."commentBy"=$2
`

type GetCommentParams struct {
	CommentID int32 `json:"commentID"`
	CommentBy int32 `json:"commentBy"`
}

type GetCommentRow struct {
	CommentID    int32          `json:"commentID"`
	CommentBy    int32          `json:"commentBy"`
	CommentOn    int32          `json:"commentOn"`
	Comment      string         `json:"comment"`
	CommentAt    time.Time      `json:"commentAt"`
	UserID       sql.NullInt32  `json:"user_id"`
	FirstName    sql.NullString `json:"firstName"`
	LastName     sql.NullString `json:"lastName"`
	Username     sql.NullString `json:"username"`
	Email        sql.NullString `json:"email"`
	Password     sql.NullString `json:"password"`
	ProfileImage sql.NullString `json:"profileImage"`
	ProfileCover sql.NullString `json:"profileCover"`
	Following    sql.NullInt32  `json:"following"`
	Followers    sql.NullInt32  `json:"followers"`
	Bio          sql.NullString `json:"bio"`
	Country      sql.NullString `json:"country"`
	Website      sql.NullString `json:"website"`
}

func (q *Queries) GetComment(ctx context.Context, arg GetCommentParams) (GetCommentRow, error) {
	row := q.queryRow(ctx, q.getCommentStmt, getComment, arg.CommentID, arg.CommentBy)
	var i GetCommentRow
	err := row.Scan(
		&i.CommentID,
		&i.CommentBy,
		&i.CommentOn,
		&i.Comment,
		&i.CommentAt,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.ProfileImage,
		&i.ProfileCover,
		&i.Following,
		&i.Followers,
		&i.Bio,
		&i.Country,
		&i.Website,
	)
	return i, err
}

const getCommentcount = `-- name: GetCommentcount :one
SELECT  count(*) as "count" FROM "comment" WHERE "commentOn"=$1
`

func (q *Queries) GetCommentcount(ctx context.Context, commenton int32) (int64, error) {
	row := q.queryRow(ctx, q.getCommentcountStmt, getCommentcount, commenton)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const repliesTweets = `-- name: RepliesTweets :one
SELECT "commentID", "commentBy", "commentOn", comment, "commentAt", user_id, "firstName", "lastName", username, email, password, "profileImage", "profileCover", following, followers, bio, country, website FROM "comment" LEFT JOIN "users" ON "commentBy"="user_id" WHERE "commentBy"= $1 ORDER BY commentAt DESC
`

type RepliesTweetsRow struct {
	CommentID    int32          `json:"commentID"`
	CommentBy    int32          `json:"commentBy"`
	CommentOn    int32          `json:"commentOn"`
	Comment      string         `json:"comment"`
	CommentAt    time.Time      `json:"commentAt"`
	UserID       sql.NullInt32  `json:"user_id"`
	FirstName    sql.NullString `json:"firstName"`
	LastName     sql.NullString `json:"lastName"`
	Username     sql.NullString `json:"username"`
	Email        sql.NullString `json:"email"`
	Password     sql.NullString `json:"password"`
	ProfileImage sql.NullString `json:"profileImage"`
	ProfileCover sql.NullString `json:"profileCover"`
	Following    sql.NullInt32  `json:"following"`
	Followers    sql.NullInt32  `json:"followers"`
	Bio          sql.NullString `json:"bio"`
	Country      sql.NullString `json:"country"`
	Website      sql.NullString `json:"website"`
}

func (q *Queries) RepliesTweets(ctx context.Context, commentby int32) (RepliesTweetsRow, error) {
	row := q.queryRow(ctx, q.repliesTweetsStmt, repliesTweets, commentby)
	var i RepliesTweetsRow
	err := row.Scan(
		&i.CommentID,
		&i.CommentBy,
		&i.CommentOn,
		&i.Comment,
		&i.CommentAt,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.ProfileImage,
		&i.ProfileCover,
		&i.Following,
		&i.Followers,
		&i.Bio,
		&i.Country,
		&i.Website,
	)
	return i, err
}

const wasCommentBy = `-- name: WasCommentBy :one
SELECT  "commentID", "commentBy", "commentOn", comment, "commentAt" FROM "comment" WHERE "commentOn"=$1 AND "commentBy" = $2
`

type WasCommentByParams struct {
	CommentOn int32 `json:"commentOn"`
	CommentBy int32 `json:"commentBy"`
}

func (q *Queries) WasCommentBy(ctx context.Context, arg WasCommentByParams) (Comment, error) {
	row := q.queryRow(ctx, q.wasCommentByStmt, wasCommentBy, arg.CommentOn, arg.CommentBy)
	var i Comment
	err := row.Scan(
		&i.CommentID,
		&i.CommentBy,
		&i.CommentOn,
		&i.Comment,
		&i.CommentAt,
	)
	return i, err
}

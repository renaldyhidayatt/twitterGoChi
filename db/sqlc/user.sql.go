// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users ("firstName","lastName","username","email","password","profileImage","profileCover") VALUES ($1,$2,$3,$4,$5,$6,$7) RETURNING user_id, "firstName", "lastName", username, email, password, "profileImage", "profileCover", following, followers, bio, country, website
`

type CreateUserParams struct {
	FirstName    string `json:"firstName"`
	LastName     string `json:"lastName"`
	Username     string `json:"username"`
	Email        string `json:"email"`
	Password     string `json:"password"`
	ProfileImage string `json:"profileImage"`
	ProfileCover string `json:"profileCover"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.ProfileImage,
		arg.ProfileCover,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.ProfileImage,
		&i.ProfileCover,
		&i.Following,
		&i.Followers,
		&i.Bio,
		&i.Country,
		&i.Website,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE username = $1
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, username)
	return err
}

const getCurrentUser = `-- name: GetCurrentUser :one
SELECT user_id, "firstName", "lastName", username, email, password, "profileImage", "profileCover", following, followers, bio, country, website FROM users WHERE user_id = $1
`

func (q *Queries) GetCurrentUser(ctx context.Context, userID int32) (User, error) {
	row := q.queryRow(ctx, q.getCurrentUserStmt, getCurrentUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.ProfileImage,
		&i.ProfileCover,
		&i.Following,
		&i.Followers,
		&i.Bio,
		&i.Country,
		&i.Website,
	)
	return i, err
}

const getUsernameOREmail = `-- name: GetUsernameOREmail :one
SELECT user_id, "firstName", "lastName", username, email, password, "profileImage", "profileCover", following, followers, bio, country, website FROM users WHERE username = $1 OR email = $1
`

func (q *Queries) GetUsernameOREmail(ctx context.Context, username string) (User, error) {
	row := q.queryRow(ctx, q.getUsernameOREmailStmt, getUsernameOREmail, username)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.ProfileImage,
		&i.ProfileCover,
		&i.Following,
		&i.Followers,
		&i.Bio,
		&i.Country,
		&i.Website,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT user_id, "firstName", "lastName", username, email, password, "profileImage", "profileCover", following, followers, bio, country, website FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.getUsersStmt, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.ProfileImage,
			&i.ProfileCover,
			&i.Following,
			&i.Followers,
			&i.Bio,
			&i.Country,
			&i.Website,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET "firstName" = $2, "lastName" = $3, "username" = $4, "email" = $5, "password" = $6, "profileImage" = $7, "profileCover" = $8, "bio" = $9, "country" = $10, "website" = $11  WHERE username = $1 RETURNING user_id, "firstName", "lastName", username, email, password, "profileImage", "profileCover", following, followers, bio, country, website
`

type UpdateUserParams struct {
	Username     string `json:"username"`
	FirstName    string `json:"firstName"`
	LastName     string `json:"lastName"`
	Username_2   string `json:"username_2"`
	Email        string `json:"email"`
	Password     string `json:"password"`
	ProfileImage string `json:"profileImage"`
	ProfileCover string `json:"profileCover"`
	Bio          string `json:"bio"`
	Country      string `json:"country"`
	Website      string `json:"website"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserStmt, updateUser,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.Username_2,
		arg.Email,
		arg.Password,
		arg.ProfileImage,
		arg.ProfileCover,
		arg.Bio,
		arg.Country,
		arg.Website,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.ProfileImage,
		&i.ProfileCover,
		&i.Following,
		&i.Followers,
		&i.Bio,
		&i.Country,
		&i.Website,
	)
	return i, err
}

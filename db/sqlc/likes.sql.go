// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: likes.sql

package db

import (
	"context"
)

const createLike = `-- name: CreateLike :one
INSERT INTO likes("likeBy", "likeOn") VALUES ($1, $2) RETURNING "likeID", "likeOn", "likeBy"
`

type CreateLikeParams struct {
	LikeBy int32 `json:"likeBy"`
	LikeOn int32 `json:"likeOn"`
}

func (q *Queries) CreateLike(ctx context.Context, arg CreateLikeParams) (Like, error) {
	row := q.queryRow(ctx, q.createLikeStmt, createLike, arg.LikeBy, arg.LikeOn)
	var i Like
	err := row.Scan(&i.LikeID, &i.LikeOn, &i.LikeBy)
	return i, err
}

const deleteLike = `-- name: DeleteLike :exec
DELETE FROM likes WHERE "likeBy" = $1 AND "likeOn" = $2
`

type DeleteLikeParams struct {
	LikeBy int32 `json:"likeBy"`
	LikeOn int32 `json:"likeOn"`
}

func (q *Queries) DeleteLike(ctx context.Context, arg DeleteLikeParams) error {
	_, err := q.exec(ctx, q.deleteLikeStmt, deleteLike, arg.LikeBy, arg.LikeOn)
	return err
}

const getLikes = `-- name: GetLikes :one
SELECT  count(*) as "count" FROM "likes" WHERE "likeOn"=$1
`

func (q *Queries) GetLikes(ctx context.Context, likeon int32) (int64, error) {
	row := q.queryRow(ctx, q.getLikesStmt, getLikes, likeon)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const wasLikeBy = `-- name: WasLikeBy :one
SELECT  "likeID", "likeOn", "likeBy" FROM "likes" WHERE "likeOn"=$1 AND "likeBy" = $2
`

type WasLikeByParams struct {
	LikeOn int32 `json:"likeOn"`
	LikeBy int32 `json:"likeBy"`
}

func (q *Queries) WasLikeBy(ctx context.Context, arg WasLikeByParams) (Like, error) {
	row := q.queryRow(ctx, q.wasLikeByStmt, wasLikeBy, arg.LikeOn, arg.LikeBy)
	var i Like
	err := row.Scan(&i.LikeID, &i.LikeOn, &i.LikeBy)
	return i, err
}

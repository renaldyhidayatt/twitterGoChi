// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: retweet.sql

package db

import (
	"context"
)

const checkRetweet = `-- name: CheckRetweet :one
SELECT  "retweetID", "retweetBy", "retweetFrom", status, "tweetOn" FROM "retweet" WHERE "retweetFrom"=$1 AND "retweetBy"=$2
`

type CheckRetweetParams struct {
	RetweetFrom int32 `json:"retweetFrom"`
	RetweetBy   int32 `json:"retweetBy"`
}

func (q *Queries) CheckRetweet(ctx context.Context, arg CheckRetweetParams) (Retweet, error) {
	row := q.queryRow(ctx, q.checkRetweetStmt, checkRetweet, arg.RetweetFrom, arg.RetweetBy)
	var i Retweet
	err := row.Scan(
		&i.RetweetID,
		&i.RetweetBy,
		&i.RetweetFrom,
		&i.Status,
		&i.TweetOn,
	)
	return i, err
}

const createRetweet = `-- name: CreateRetweet :one
INSERT INTO retweet ("retweetBy", "retweetFrom") VALUES ($1, $2) RETURNING "retweetID", "retweetBy", "retweetFrom", status, "tweetOn"
`

type CreateRetweetParams struct {
	RetweetBy   int32 `json:"retweetBy"`
	RetweetFrom int32 `json:"retweetFrom"`
}

func (q *Queries) CreateRetweet(ctx context.Context, arg CreateRetweetParams) (Retweet, error) {
	row := q.queryRow(ctx, q.createRetweetStmt, createRetweet, arg.RetweetBy, arg.RetweetFrom)
	var i Retweet
	err := row.Scan(
		&i.RetweetID,
		&i.RetweetBy,
		&i.RetweetFrom,
		&i.Status,
		&i.TweetOn,
	)
	return i, err
}

const deleteRetweet = `-- name: DeleteRetweet :exec
DELETE FROM retweet WHERE "retweetBy" = $1 AND "retweetFrom" = $2
`

type DeleteRetweetParams struct {
	RetweetBy   int32 `json:"retweetBy"`
	RetweetFrom int32 `json:"retweetFrom"`
}

func (q *Queries) DeleteRetweet(ctx context.Context, arg DeleteRetweetParams) error {
	_, err := q.exec(ctx, q.deleteRetweetStmt, deleteRetweet, arg.RetweetBy, arg.RetweetFrom)
	return err
}

const getRetweet = `-- name: GetRetweet :one
SELECT  count(*) as "count" FROM "retweet" WHERE "retweetFrom"=$1
`

func (q *Queries) GetRetweet(ctx context.Context, retweetfrom int32) (int64, error) {
	row := q.queryRow(ctx, q.getRetweetStmt, getRetweet, retweetfrom)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const wasRetweetBy = `-- name: WasRetweetBy :one
SELECT  "retweetID", "retweetBy", "retweetFrom", status, "tweetOn" FROM "retweet" WHERE "retweetFrom"=$1 AND "retweetBy"=$2
`

type WasRetweetByParams struct {
	RetweetFrom int32 `json:"retweetFrom"`
	RetweetBy   int32 `json:"retweetBy"`
}

func (q *Queries) WasRetweetBy(ctx context.Context, arg WasRetweetByParams) (Retweet, error) {
	row := q.queryRow(ctx, q.wasRetweetByStmt, wasRetweetBy, arg.RetweetFrom, arg.RetweetBy)
	var i Retweet
	err := row.Scan(
		&i.RetweetID,
		&i.RetweetBy,
		&i.RetweetFrom,
		&i.Status,
		&i.TweetOn,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: notification.sql

package db

import (
	"context"
	"time"
)

const createNotification = `-- name: CreateNotification :one
INSERT INTO notification("notificationFor", "notificationFrom", type, status, target,"notificationCount", "notificationOn") VALUES($1, $2, $3, $4, $5, $6, $7) RETURNING "ID", "notificationFor", "notificationFrom", target, type, "notificationOn", "notificationCount", status
`

type CreateNotificationParams struct {
	NotificationFor   int32                `json:"notificationFor"`
	NotificationFrom  int32                `json:"notificationFrom"`
	Type              EnumNotificationType `json:"type"`
	Status            int32                `json:"status"`
	Target            int32                `json:"target"`
	NotificationCount int32                `json:"notificationCount"`
	NotificationOn    time.Time            `json:"notificationOn"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.queryRow(ctx, q.createNotificationStmt, createNotification,
		arg.NotificationFor,
		arg.NotificationFrom,
		arg.Type,
		arg.Status,
		arg.Target,
		arg.NotificationCount,
		arg.NotificationOn,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.NotificationFor,
		&i.NotificationFrom,
		&i.Target,
		&i.Type,
		&i.NotificationOn,
		&i.NotificationCount,
		&i.Status,
	)
	return i, err
}

const deleteNotification = `-- name: DeleteNotification :exec
DELETE FROM notification WHERE "notificationFor"=$1 AND "notificationFrom"=$2 AND type=$3 AND target = $4
`

type DeleteNotificationParams struct {
	NotificationFor  int32                `json:"notificationFor"`
	NotificationFrom int32                `json:"notificationFrom"`
	Type             EnumNotificationType `json:"type"`
	Target           int32                `json:"target"`
}

func (q *Queries) DeleteNotification(ctx context.Context, arg DeleteNotificationParams) error {
	_, err := q.exec(ctx, q.deleteNotificationStmt, deleteNotification,
		arg.NotificationFor,
		arg.NotificationFrom,
		arg.Type,
		arg.Target,
	)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addFollowStmt, err = db.PrepareContext(ctx, addFollow); err != nil {
		return nil, fmt.Errorf("error preparing query AddFollow: %w", err)
	}
	if q.addFollowerCountStmt, err = db.PrepareContext(ctx, addFollowerCount); err != nil {
		return nil, fmt.Errorf("error preparing query AddFollowerCount: %w", err)
	}
	if q.addFollowingCountStmt, err = db.PrepareContext(ctx, addFollowingCount); err != nil {
		return nil, fmt.Errorf("error preparing query AddFollowingCount: %w", err)
	}
	if q.checkFollowStmt, err = db.PrepareContext(ctx, checkFollow); err != nil {
		return nil, fmt.Errorf("error preparing query CheckFollow: %w", err)
	}
	if q.checkRetweetStmt, err = db.PrepareContext(ctx, checkRetweet); err != nil {
		return nil, fmt.Errorf("error preparing query CheckRetweet: %w", err)
	}
	if q.createCommentStmt, err = db.PrepareContext(ctx, createComment); err != nil {
		return nil, fmt.Errorf("error preparing query CreateComment: %w", err)
	}
	if q.createLikeStmt, err = db.PrepareContext(ctx, createLike); err != nil {
		return nil, fmt.Errorf("error preparing query CreateLike: %w", err)
	}
	if q.createNotificationStmt, err = db.PrepareContext(ctx, createNotification); err != nil {
		return nil, fmt.Errorf("error preparing query CreateNotification: %w", err)
	}
	if q.createRetweetStmt, err = db.PrepareContext(ctx, createRetweet); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRetweet: %w", err)
	}
	if q.createTrendStmt, err = db.PrepareContext(ctx, createTrend); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTrend: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteCommentStmt, err = db.PrepareContext(ctx, deleteComment); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteComment: %w", err)
	}
	if q.deleteLikeStmt, err = db.PrepareContext(ctx, deleteLike); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteLike: %w", err)
	}
	if q.deleteNotificationStmt, err = db.PrepareContext(ctx, deleteNotification); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteNotification: %w", err)
	}
	if q.deleteRetweetStmt, err = db.PrepareContext(ctx, deleteRetweet); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRetweet: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getCommentStmt, err = db.PrepareContext(ctx, getComment); err != nil {
		return nil, fmt.Errorf("error preparing query GetComment: %w", err)
	}
	if q.getCommentcountStmt, err = db.PrepareContext(ctx, getCommentcount); err != nil {
		return nil, fmt.Errorf("error preparing query GetCommentcount: %w", err)
	}
	if q.getCurrentUserStmt, err = db.PrepareContext(ctx, getCurrentUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetCurrentUser: %w", err)
	}
	if q.getHashTagTweetStmt, err = db.PrepareContext(ctx, getHashTagTweet); err != nil {
		return nil, fmt.Errorf("error preparing query GetHashTagTweet: %w", err)
	}
	if q.getLikesStmt, err = db.PrepareContext(ctx, getLikes); err != nil {
		return nil, fmt.Errorf("error preparing query GetLikes: %w", err)
	}
	if q.getMentionStmt, err = db.PrepareContext(ctx, getMention); err != nil {
		return nil, fmt.Errorf("error preparing query GetMention: %w", err)
	}
	if q.getRetweetStmt, err = db.PrepareContext(ctx, getRetweet); err != nil {
		return nil, fmt.Errorf("error preparing query GetRetweet: %w", err)
	}
	if q.getTrendByHashStmt, err = db.PrepareContext(ctx, getTrendByHash); err != nil {
		return nil, fmt.Errorf("error preparing query GetTrendByHash: %w", err)
	}
	if q.getTrendsStmt, err = db.PrepareContext(ctx, getTrends); err != nil {
		return nil, fmt.Errorf("error preparing query GetTrends: %w", err)
	}
	if q.getTweetStmt, err = db.PrepareContext(ctx, getTweet); err != nil {
		return nil, fmt.Errorf("error preparing query GetTweet: %w", err)
	}
	if q.getTweetAllStmt, err = db.PrepareContext(ctx, getTweetAll); err != nil {
		return nil, fmt.Errorf("error preparing query GetTweetAll: %w", err)
	}
	if q.getTweetByMeStmt, err = db.PrepareContext(ctx, getTweetByMe); err != nil {
		return nil, fmt.Errorf("error preparing query GetTweetByMe: %w", err)
	}
	if q.getUsernameOREmailStmt, err = db.PrepareContext(ctx, getUsernameOREmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsernameOREmail: %w", err)
	}
	if q.getUsersStmt, err = db.PrepareContext(ctx, getUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsers: %w", err)
	}
	if q.removeFollowersCountStmt, err = db.PrepareContext(ctx, removeFollowersCount); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveFollowersCount: %w", err)
	}
	if q.removeFollowingCountStmt, err = db.PrepareContext(ctx, removeFollowingCount); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveFollowingCount: %w", err)
	}
	if q.repliesTweetsStmt, err = db.PrepareContext(ctx, repliesTweets); err != nil {
		return nil, fmt.Errorf("error preparing query RepliesTweets: %w", err)
	}
	if q.resultFollowOrUnFollowStmt, err = db.PrepareContext(ctx, resultFollowOrUnFollow); err != nil {
		return nil, fmt.Errorf("error preparing query ResultFollowOrUnFollow: %w", err)
	}
	if q.resultFollowersListStmt, err = db.PrepareContext(ctx, resultFollowersList); err != nil {
		return nil, fmt.Errorf("error preparing query ResultFollowersList: %w", err)
	}
	if q.resultFollowingListStmt, err = db.PrepareContext(ctx, resultFollowingList); err != nil {
		return nil, fmt.Errorf("error preparing query ResultFollowingList: %w", err)
	}
	if q.suggestedListStmt, err = db.PrepareContext(ctx, suggestedList); err != nil {
		return nil, fmt.Errorf("error preparing query SuggestedList: %w", err)
	}
	if q.tweetCountsStmt, err = db.PrepareContext(ctx, tweetCounts); err != nil {
		return nil, fmt.Errorf("error preparing query TweetCounts: %w", err)
	}
	if q.unFollowStmt, err = db.PrepareContext(ctx, unFollow); err != nil {
		return nil, fmt.Errorf("error preparing query UnFollow: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	if q.wasCommentByStmt, err = db.PrepareContext(ctx, wasCommentBy); err != nil {
		return nil, fmt.Errorf("error preparing query WasCommentBy: %w", err)
	}
	if q.wasLikeByStmt, err = db.PrepareContext(ctx, wasLikeBy); err != nil {
		return nil, fmt.Errorf("error preparing query WasLikeBy: %w", err)
	}
	if q.wasRetweetByStmt, err = db.PrepareContext(ctx, wasRetweetBy); err != nil {
		return nil, fmt.Errorf("error preparing query WasRetweetBy: %w", err)
	}
	if q.whoToFollowStmt, err = db.PrepareContext(ctx, whoToFollow); err != nil {
		return nil, fmt.Errorf("error preparing query WhoToFollow: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addFollowStmt != nil {
		if cerr := q.addFollowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addFollowStmt: %w", cerr)
		}
	}
	if q.addFollowerCountStmt != nil {
		if cerr := q.addFollowerCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addFollowerCountStmt: %w", cerr)
		}
	}
	if q.addFollowingCountStmt != nil {
		if cerr := q.addFollowingCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addFollowingCountStmt: %w", cerr)
		}
	}
	if q.checkFollowStmt != nil {
		if cerr := q.checkFollowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkFollowStmt: %w", cerr)
		}
	}
	if q.checkRetweetStmt != nil {
		if cerr := q.checkRetweetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkRetweetStmt: %w", cerr)
		}
	}
	if q.createCommentStmt != nil {
		if cerr := q.createCommentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCommentStmt: %w", cerr)
		}
	}
	if q.createLikeStmt != nil {
		if cerr := q.createLikeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createLikeStmt: %w", cerr)
		}
	}
	if q.createNotificationStmt != nil {
		if cerr := q.createNotificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createNotificationStmt: %w", cerr)
		}
	}
	if q.createRetweetStmt != nil {
		if cerr := q.createRetweetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRetweetStmt: %w", cerr)
		}
	}
	if q.createTrendStmt != nil {
		if cerr := q.createTrendStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTrendStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteCommentStmt != nil {
		if cerr := q.deleteCommentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCommentStmt: %w", cerr)
		}
	}
	if q.deleteLikeStmt != nil {
		if cerr := q.deleteLikeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteLikeStmt: %w", cerr)
		}
	}
	if q.deleteNotificationStmt != nil {
		if cerr := q.deleteNotificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteNotificationStmt: %w", cerr)
		}
	}
	if q.deleteRetweetStmt != nil {
		if cerr := q.deleteRetweetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRetweetStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getCommentStmt != nil {
		if cerr := q.getCommentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCommentStmt: %w", cerr)
		}
	}
	if q.getCommentcountStmt != nil {
		if cerr := q.getCommentcountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCommentcountStmt: %w", cerr)
		}
	}
	if q.getCurrentUserStmt != nil {
		if cerr := q.getCurrentUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCurrentUserStmt: %w", cerr)
		}
	}
	if q.getHashTagTweetStmt != nil {
		if cerr := q.getHashTagTweetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHashTagTweetStmt: %w", cerr)
		}
	}
	if q.getLikesStmt != nil {
		if cerr := q.getLikesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLikesStmt: %w", cerr)
		}
	}
	if q.getMentionStmt != nil {
		if cerr := q.getMentionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMentionStmt: %w", cerr)
		}
	}
	if q.getRetweetStmt != nil {
		if cerr := q.getRetweetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRetweetStmt: %w", cerr)
		}
	}
	if q.getTrendByHashStmt != nil {
		if cerr := q.getTrendByHashStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTrendByHashStmt: %w", cerr)
		}
	}
	if q.getTrendsStmt != nil {
		if cerr := q.getTrendsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTrendsStmt: %w", cerr)
		}
	}
	if q.getTweetStmt != nil {
		if cerr := q.getTweetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTweetStmt: %w", cerr)
		}
	}
	if q.getTweetAllStmt != nil {
		if cerr := q.getTweetAllStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTweetAllStmt: %w", cerr)
		}
	}
	if q.getTweetByMeStmt != nil {
		if cerr := q.getTweetByMeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTweetByMeStmt: %w", cerr)
		}
	}
	if q.getUsernameOREmailStmt != nil {
		if cerr := q.getUsernameOREmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsernameOREmailStmt: %w", cerr)
		}
	}
	if q.getUsersStmt != nil {
		if cerr := q.getUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersStmt: %w", cerr)
		}
	}
	if q.removeFollowersCountStmt != nil {
		if cerr := q.removeFollowersCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeFollowersCountStmt: %w", cerr)
		}
	}
	if q.removeFollowingCountStmt != nil {
		if cerr := q.removeFollowingCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeFollowingCountStmt: %w", cerr)
		}
	}
	if q.repliesTweetsStmt != nil {
		if cerr := q.repliesTweetsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing repliesTweetsStmt: %w", cerr)
		}
	}
	if q.resultFollowOrUnFollowStmt != nil {
		if cerr := q.resultFollowOrUnFollowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing resultFollowOrUnFollowStmt: %w", cerr)
		}
	}
	if q.resultFollowersListStmt != nil {
		if cerr := q.resultFollowersListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing resultFollowersListStmt: %w", cerr)
		}
	}
	if q.resultFollowingListStmt != nil {
		if cerr := q.resultFollowingListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing resultFollowingListStmt: %w", cerr)
		}
	}
	if q.suggestedListStmt != nil {
		if cerr := q.suggestedListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing suggestedListStmt: %w", cerr)
		}
	}
	if q.tweetCountsStmt != nil {
		if cerr := q.tweetCountsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing tweetCountsStmt: %w", cerr)
		}
	}
	if q.unFollowStmt != nil {
		if cerr := q.unFollowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing unFollowStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	if q.wasCommentByStmt != nil {
		if cerr := q.wasCommentByStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing wasCommentByStmt: %w", cerr)
		}
	}
	if q.wasLikeByStmt != nil {
		if cerr := q.wasLikeByStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing wasLikeByStmt: %w", cerr)
		}
	}
	if q.wasRetweetByStmt != nil {
		if cerr := q.wasRetweetByStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing wasRetweetByStmt: %w", cerr)
		}
	}
	if q.whoToFollowStmt != nil {
		if cerr := q.whoToFollowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing whoToFollowStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                         DBTX
	tx                         *sql.Tx
	addFollowStmt              *sql.Stmt
	addFollowerCountStmt       *sql.Stmt
	addFollowingCountStmt      *sql.Stmt
	checkFollowStmt            *sql.Stmt
	checkRetweetStmt           *sql.Stmt
	createCommentStmt          *sql.Stmt
	createLikeStmt             *sql.Stmt
	createNotificationStmt     *sql.Stmt
	createRetweetStmt          *sql.Stmt
	createTrendStmt            *sql.Stmt
	createUserStmt             *sql.Stmt
	deleteCommentStmt          *sql.Stmt
	deleteLikeStmt             *sql.Stmt
	deleteNotificationStmt     *sql.Stmt
	deleteRetweetStmt          *sql.Stmt
	deleteUserStmt             *sql.Stmt
	getCommentStmt             *sql.Stmt
	getCommentcountStmt        *sql.Stmt
	getCurrentUserStmt         *sql.Stmt
	getHashTagTweetStmt        *sql.Stmt
	getLikesStmt               *sql.Stmt
	getMentionStmt             *sql.Stmt
	getRetweetStmt             *sql.Stmt
	getTrendByHashStmt         *sql.Stmt
	getTrendsStmt              *sql.Stmt
	getTweetStmt               *sql.Stmt
	getTweetAllStmt            *sql.Stmt
	getTweetByMeStmt           *sql.Stmt
	getUsernameOREmailStmt     *sql.Stmt
	getUsersStmt               *sql.Stmt
	removeFollowersCountStmt   *sql.Stmt
	removeFollowingCountStmt   *sql.Stmt
	repliesTweetsStmt          *sql.Stmt
	resultFollowOrUnFollowStmt *sql.Stmt
	resultFollowersListStmt    *sql.Stmt
	resultFollowingListStmt    *sql.Stmt
	suggestedListStmt          *sql.Stmt
	tweetCountsStmt            *sql.Stmt
	unFollowStmt               *sql.Stmt
	updateUserStmt             *sql.Stmt
	wasCommentByStmt           *sql.Stmt
	wasLikeByStmt              *sql.Stmt
	wasRetweetByStmt           *sql.Stmt
	whoToFollowStmt            *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                         tx,
		tx:                         tx,
		addFollowStmt:              q.addFollowStmt,
		addFollowerCountStmt:       q.addFollowerCountStmt,
		addFollowingCountStmt:      q.addFollowingCountStmt,
		checkFollowStmt:            q.checkFollowStmt,
		checkRetweetStmt:           q.checkRetweetStmt,
		createCommentStmt:          q.createCommentStmt,
		createLikeStmt:             q.createLikeStmt,
		createNotificationStmt:     q.createNotificationStmt,
		createRetweetStmt:          q.createRetweetStmt,
		createTrendStmt:            q.createTrendStmt,
		createUserStmt:             q.createUserStmt,
		deleteCommentStmt:          q.deleteCommentStmt,
		deleteLikeStmt:             q.deleteLikeStmt,
		deleteNotificationStmt:     q.deleteNotificationStmt,
		deleteRetweetStmt:          q.deleteRetweetStmt,
		deleteUserStmt:             q.deleteUserStmt,
		getCommentStmt:             q.getCommentStmt,
		getCommentcountStmt:        q.getCommentcountStmt,
		getCurrentUserStmt:         q.getCurrentUserStmt,
		getHashTagTweetStmt:        q.getHashTagTweetStmt,
		getLikesStmt:               q.getLikesStmt,
		getMentionStmt:             q.getMentionStmt,
		getRetweetStmt:             q.getRetweetStmt,
		getTrendByHashStmt:         q.getTrendByHashStmt,
		getTrendsStmt:              q.getTrendsStmt,
		getTweetStmt:               q.getTweetStmt,
		getTweetAllStmt:            q.getTweetAllStmt,
		getTweetByMeStmt:           q.getTweetByMeStmt,
		getUsernameOREmailStmt:     q.getUsernameOREmailStmt,
		getUsersStmt:               q.getUsersStmt,
		removeFollowersCountStmt:   q.removeFollowersCountStmt,
		removeFollowingCountStmt:   q.removeFollowingCountStmt,
		repliesTweetsStmt:          q.repliesTweetsStmt,
		resultFollowOrUnFollowStmt: q.resultFollowOrUnFollowStmt,
		resultFollowersListStmt:    q.resultFollowersListStmt,
		resultFollowingListStmt:    q.resultFollowingListStmt,
		suggestedListStmt:          q.suggestedListStmt,
		tweetCountsStmt:            q.tweetCountsStmt,
		unFollowStmt:               q.unFollowStmt,
		updateUserStmt:             q.updateUserStmt,
		wasCommentByStmt:           q.wasCommentByStmt,
		wasLikeByStmt:              q.wasLikeByStmt,
		wasRetweetByStmt:           q.wasRetweetByStmt,
		whoToFollowStmt:            q.whoToFollowStmt,
	}
}

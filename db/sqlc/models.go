// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type EnumNotificationType string

const (
	EnumNotificationTypeLike    EnumNotificationType = "like"
	EnumNotificationTypeComment EnumNotificationType = "comment"
	EnumNotificationTypeRetweet EnumNotificationType = "retweet"
	EnumNotificationTypeFollow  EnumNotificationType = "follow"
	EnumNotificationTypeMessage EnumNotificationType = "message"
	EnumNotificationTypeMention EnumNotificationType = "mention"
)

func (e *EnumNotificationType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EnumNotificationType(s)
	case string:
		*e = EnumNotificationType(s)
	default:
		return fmt.Errorf("unsupported scan type for EnumNotificationType: %T", src)
	}
	return nil
}

type NullEnumNotificationType struct {
	EnumNotificationType EnumNotificationType
	Valid                bool // Valid is true if EnumNotificationType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEnumNotificationType) Scan(value interface{}) error {
	if value == nil {
		ns.EnumNotificationType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EnumNotificationType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEnumNotificationType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.EnumNotificationType, nil
}

type Comment struct {
	CommentID int32     `json:"commentID"`
	CommentBy int32     `json:"commentBy"`
	CommentOn int32     `json:"commentOn"`
	Comment   string    `json:"comment"`
	CommentAt time.Time `json:"commentAt"`
}

type Follow struct {
	FollowID     int32     `json:"followID"`
	Sender       int32     `json:"sender"`
	Receiver     int32     `json:"receiver"`
	FollowStatus string    `json:"followStatus"`
	FollowOn     time.Time `json:"followOn"`
}

type Like struct {
	LikeID int32 `json:"likeID"`
	LikeOn int32 `json:"likeOn"`
	LikeBy int32 `json:"likeBy"`
}

type Message struct {
	MessageID   int32     `json:"messageID"`
	Message     string    `json:"message"`
	MessageTo   int32     `json:"messageTo"`
	MessageFrom int32     `json:"messageFrom"`
	MessageOn   time.Time `json:"messageOn"`
	Status      int32     `json:"status"`
}

type Notification struct {
	ID                int32                `json:"ID"`
	NotificationFor   int32                `json:"notificationFor"`
	NotificationFrom  int32                `json:"notificationFrom"`
	Target            int32                `json:"target"`
	Type              EnumNotificationType `json:"type"`
	NotificationOn    time.Time            `json:"notificationOn"`
	NotificationCount int32                `json:"notificationCount"`
	Status            int32                `json:"status"`
}

type Retweet struct {
	RetweetID   int32     `json:"retweetID"`
	RetweetBy   int32     `json:"retweetBy"`
	RetweetFrom int32     `json:"retweetFrom"`
	Status      string    `json:"status"`
	TweetOn     time.Time `json:"tweetOn"`
}

type Trend struct {
	TrendID   int32     `json:"trendID"`
	Hashtag   string    `json:"hashtag"`
	UserID    int32     `json:"user_id"`
	TweetId   int32     `json:"tweetId"`
	CreatedOn time.Time `json:"createdOn"`
}

type Tweet struct {
	TweetID    int32     `json:"tweet_id"`
	Status     string    `json:"status"`
	TweetBy    int32     `json:"tweetBy"`
	TweetImage string    `json:"tweetImage"`
	PostedOn   time.Time `json:"postedOn"`
}

type User struct {
	UserID       int32  `json:"user_id"`
	FirstName    string `json:"firstName"`
	LastName     string `json:"lastName"`
	Username     string `json:"username"`
	Email        string `json:"email"`
	Password     string `json:"password"`
	ProfileImage string `json:"profileImage"`
	ProfileCover string `json:"profileCover"`
	Following    int32  `json:"following"`
	Followers    int32  `json:"followers"`
	Bio          string `json:"bio"`
	Country      string `json:"country"`
	Website      string `json:"website"`
}
